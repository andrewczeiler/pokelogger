// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Location {
  id            Int @id @default(autoincrement())
  game          String
  pokemonName   String
  location      String
}

model Pokemon {
  id       Int      @id @default(autoincrement())
  number   Int
  name     String
  form     String
  caught   Boolean  @default(false)
  Pokedex  Pokedex? @relation(fields: [userId, dexName], references: [userId, name])
  userId   String?
  dexName  String?
}

model Pokedex {
  id       Int       @default(autoincrement())
  userId   String
  type     String
  shiny    Boolean
  name     String
  user     User      @relation(fields: [userId], references: [id])
  pokemons Pokemon[]

  @@id([userId, name])
  @@map("pokedexes")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  pokedexes Pokedex[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}